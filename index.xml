<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Akagi201 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://akagi201.github.io/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Thu, 29 Jan 2015 10:46:08 CST</updated>
    
    <item>
      <title>Links</title>
      <link>http://akagi201.github.io/links/</link>
      <pubDate>Thu, 29 Jan 2015 10:46:08 CST</pubDate>
      
      <guid>http://akagi201.github.io/links/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Invite Link&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.v2ex.com/?r=Akagi201&#34;&gt;V2ex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;portal.qiniu.com/signup?code=16n5jhzad4mz2&#34;&gt;七牛云存储&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Friends&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rambo419.com/&#34;&gt;篮子, 我高中同学中唯一跟我一样搞技术的有喜欢折腾的, 哈哈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.8090sec.com/&#34;&gt;人生注入点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.programlife.net/&#34;&gt;代码疯子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spud.in/&#34;&gt;茴香-徐嘉轶&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Stream Encoder</title>
      <link>http://akagi201.github.io/blog/stream-encoder/</link>
      <pubDate>Wed, 14 Jan 2015 16:02:08 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/stream-encoder/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;OBS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jp9000/obs-studio&#34;&gt;https://github.com/jp9000/obs-studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开发前说明: &lt;a href=&#34;https://obsproject.com/forum/threads/getting-started-with-obs-development.21326/&#34;&gt;https://obsproject.com/forum/threads/getting-started-with-obs-development.21326/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文档: &lt;a href=&#34;http://jp9000.github.io/OBS/&#34;&gt;http://jp9000.github.io/OBS/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OBS core: libobs, OBS UI: obs, core跟ui是独立的.&lt;/li&gt;
&lt;li&gt;OBS core plugins: plugins&lt;/li&gt;
&lt;li&gt;IRC: #obsproject on Freenode, #obs-dev on Quakenet&lt;/li&gt;
&lt;li&gt;settings estimator: &lt;a href=&#34;https://obsproject.com/estimator&#34;&gt;https://obsproject.com/estimator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;BLE&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wenjiegit/Bull-Live-Encoder&#34;&gt;https://github.com/wenjiegit/Bull-Live-Encoder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://akagi201.github.io/license/</link>
      <pubDate>Tue, 16 Dec 2014 03:37:08 CST</pubDate>
      
      <guid>http://akagi201.github.io/license/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Content license&lt;/h2&gt;

&lt;p&gt;All non-code blog content is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons BY-NC-SA&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Code license&lt;/h2&gt;

&lt;p&gt;All source code files and snippets found on this blog, unless otherwise explicitly noted, are licensed under the terms below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;Copyright 2013-2014 Bob Liu

Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Learning RTP</title>
      <link>http://akagi201.github.io/blog/learning-rtp/</link>
      <pubDate>Mon, 15 Dec 2014 21:50:26 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-rtp/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.mindmup.com/map/b/akagi201/learning-rtp.mup&#34; data-role=&#34;mindmup-embed&#34; title=&#34;learning-rtp&#34; data-width=&#34;90%&#34; data-height=&#34;500&#34; data-style=&#34;border:1px solid black;margin-bottom:5px;&#34;&gt;learning-rtp on MindMup&lt;/a&gt;
&lt;script async src=&#34;https://www.mindmup.com/external-embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RTP&lt;/code&gt;(Real-time Transport Protocol)是用于Internet上针对多媒体数据流的一种传输协议. &lt;code&gt;RTP&lt;/code&gt;被定义为在一对一或一对多的传输情况下工作, 其目的是提供时间信息和实现流同步. &lt;code&gt;RTP&lt;/code&gt;通常使用&lt;code&gt;UDP&lt;/code&gt;来传送数据, 但&lt;code&gt;RTP&lt;/code&gt;也可以在&lt;code&gt;TCP&lt;/code&gt;或&lt;code&gt;ATM&lt;/code&gt;等其他协议之上工作.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RTP&lt;/code&gt;本身并没有提供按时发送机制或其他服务质量(QoS)保证, 它依赖于底层服务去实现这一过程. &lt;code&gt;RTP&lt;/code&gt;并不保证传送或防止无序传送, 也不确定底层网络的可靠性.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;book&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/rtp-audio-and/0672322498/&#34;&gt;https://www.safaribooksonline.com/library/view/rtp-audio-and/0672322498/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/RTP-Audio-Video-Internet-paperback/dp/0321833627&#34;&gt;http://www.amazon.com/RTP-Audio-Video-Internet-paperback/dp/0321833627&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learning cURL</title>
      <link>http://akagi201.github.io/blog/learning-curl/</link>
      <pubDate>Tue, 09 Dec 2014 03:55:26 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-curl/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.mindmup.com/map/b/akagi201/learning-curl.mup&#34; data-role=&#34;mindmup-embed&#34; title=&#34;learning-gtest&#34; data-width=&#34;90%&#34; data-height=&#34;500&#34; data-style=&#34;border:1px solid black;margin-bottom:5px;&#34;&gt;learning-gtest on MindMup&lt;/a&gt;
&lt;script async src=&#34;https://www.mindmup.com/external-embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;cURL全称是&amp;rdquo;Client for URLs&amp;rdquo;, 即URL客户端.&lt;/p&gt;

&lt;p&gt;是&lt;a href=&#34;https://github.com/bagder&#34;&gt;Daniel Stenberg&lt;/a&gt;的一个个人项目, 就放在个人的一个二级域名&lt;a href=&#34;http://curl.haxx.se/&#34;&gt;http://curl.haxx.se/&lt;/a&gt;下, 所以有的地方略显粗糙也可以理解了.&lt;/p&gt;

&lt;p&gt;项目历史应该比较久远了, 文档全是用的&lt;code&gt;manpage&lt;/code&gt;写的, 不用到处找了, 直接&lt;code&gt;man&lt;/code&gt;就可以了.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl&lt;/code&gt;的&lt;code&gt;repo&lt;/code&gt;由两部分组成, &lt;code&gt;curl&lt;/code&gt;命令行跟&lt;code&gt;libcurl&lt;/code&gt;, 其中复杂的东西都在&lt;code&gt;libcurl&lt;/code&gt;中了.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;源码结构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl&lt;/code&gt;命令行的源码在&lt;code&gt;src/&lt;/code&gt;, 入口在&lt;code&gt;tool_main.c&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libcurl&lt;/code&gt;的源码在&lt;code&gt;lib/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;API example&lt;/code&gt;的源码在&lt;code&gt;docs/examples&lt;/code&gt;下.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learning Google C&#43;&#43; Testing Framework</title>
      <link>http://akagi201.github.io/blog/learning-gtest/</link>
      <pubDate>Thu, 04 Dec 2014 21:35:26 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-gtest/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.mindmup.com/map/b/akagi201/learning-gtest.mup&#34; data-role=&#34;mindmup-embed&#34; title=&#34;learning-gtest&#34; data-width=&#34;90%&#34; data-height=&#34;500&#34; data-style=&#34;border:1px solid black;margin-bottom:5px;&#34;&gt;learning-gtest on MindMup&lt;/a&gt;
&lt;script async src=&#34;https://www.mindmup.com/external-embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;最近接触不少有趣的小项目, 让我重拾C语言的乐趣了. 现在移动和web发展非常块, web领域技术的发展, 也推进了底层技术的发展. &lt;code&gt;clib&lt;/code&gt;就让我对&lt;code&gt;js&lt;/code&gt;跟&lt;code&gt;node&lt;/code&gt;这帮人的印象大大改观.&lt;/p&gt;

&lt;p&gt;跟着牛人的脚本慢慢前进是不会错的. 选择了&lt;code&gt;CLion&lt;/code&gt;, 导致选择了&lt;code&gt;CMake&lt;/code&gt;, 又由&lt;code&gt;CMake&lt;/code&gt;跟&lt;code&gt;CLion&lt;/code&gt;选择了&lt;code&gt;GTest&lt;/code&gt;. 学习下来发现都是好东西.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Google C++ Testing Framework&lt;/code&gt;简称&lt;code&gt;GTest&lt;/code&gt;, 跟&lt;code&gt;CMake&lt;/code&gt;集成的非常好, 而且他本身就是用&lt;code&gt;CMake&lt;/code&gt;编译的, 作为一个转向&lt;code&gt;CMake&lt;/code&gt;开发者来说, 这是极赞的.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GTest&lt;/code&gt;文档相应比较少, 对于新手来说可能有点曲线, 我写了几个集成&lt;code&gt;Makefile&lt;/code&gt;跟&lt;code&gt;CMake&lt;/code&gt;的例子, 可以看看: &lt;a href=&#34;https://github.com/Akagi201/learning-gtest&#34;&gt;https://github.com/Akagi201/learning-gtest&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Libuv</title>
      <link>http://akagi201.github.io/blog/learning-libuv/</link>
      <pubDate>Thu, 13 Nov 2014 01:50:26 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-libuv/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.mindmup.com/map/b/akagi201/learning-libuv.mup&#34; data-role=&#34;mindmup-embed&#34; title=&#34;learning-libuv&#34; data-width=&#34;90%&#34; data-height=&#34;500&#34; data-style=&#34;border:1px solid black;margin-bottom:5px;&#34;&gt;learning-libuv on MindMup&lt;/a&gt;
&lt;script async src=&#34;https://www.mindmup.com/external-embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;想研究libuv很久了, 一直没有用他的机会, 这次项目中有个多进程管理的地方, 正纠结怎么操作麻烦的信号量时, 想起libuv也可以完成这件事, 所以, 赶紧用起来. 不用白不用.&lt;/p&gt;

&lt;p&gt;Lua在嵌入式领域大有可以, 可以编译成一个liblua.a的库静态连接到C程序, 还有很多丰富的工具, 本身语言有非常小巧, 以后还是多用lua写写, 方便移植啊. 多平台各种差异, 搞死人啊.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning uC/OS</title>
      <link>http://akagi201.github.io/blog/learning-ucos/</link>
      <pubDate>Thu, 13 Nov 2014 01:28:26 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-ucos/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.mindmup.com/map/b/akagi201/learning-ucos.mup&#34; data-role=&#34;mindmup-embed&#34; title=&#34;learning-ucos&#34; data-width=&#34;90%&#34; data-height=&#34;500&#34; data-style=&#34;border:1px solid black;margin-bottom:5px;&#34;&gt;learning-ucos on MindMup&lt;/a&gt;
&lt;script async src=&#34;https://www.mindmup.com/external-embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;最近比较粗略的学习了一下uC/OS-II的系统, 感觉设计上中规中矩吧, 很多类似的结构, 应该可以设计得更精简些的, 不过, 在单片机系统上用的还是蛮多的. 其中任务就绪表跟内存管理部分, 还需要有空再详细看看.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Blog</title>
      <link>http://akagi201.github.io/blog/about-blog/</link>
      <pubDate>Tue, 21 Oct 2014 02:53:26 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/about-blog/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;TODO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在slide部分上方显示我的头像.&lt;/li&gt;
&lt;li&gt;在手机跟PC上显示slide部分更优雅一点.&lt;/li&gt;
&lt;li&gt;中英文两个版本切换.&lt;/li&gt;
&lt;li&gt;不同分类用不同的样式.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Categories&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;blog, tool, book, talk, project&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Tags&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;openwrt, kernel, wifi, hardware, macosx, golang, algorithm, git, protocol, security&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Markdown Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Akagi201/akblog&#34;&gt;https://github.com/Akagi201/akblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Static Pages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Akagi201/akagi201.github.io&#34;&gt;https://github.com/Akagi201/akagi201.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://akagi201.github.io/about/</link>
      <pubDate>Tue, 21 Oct 2014 01:48:08 CST</pubDate>
      
      <guid>http://akagi201.github.io/about/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Time Line&lt;/h2&gt;

&lt;p&gt;The importportant things in my life. &lt;a href=&#34;http://akagi201.github.io/aklife/&#34;&gt;http://akagi201.github.io/aklife/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Resume&lt;/h2&gt;

&lt;p&gt;My Resume on GitHub Pages. &lt;a href=&#34;http://cv.akagi201.org&#34;&gt;http://cv.akagi201.org&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;About Me&lt;/h2&gt;

&lt;p&gt;On About.Me page. &lt;a href=&#34;http://about.me/akagi201&#34;&gt;http://about.me/akagi201&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Contact Me&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Akagi201 is my ID, and I am everywhere.&lt;/li&gt;
&lt;li&gt;qq: 1413031398&lt;/li&gt;
&lt;li&gt;Hangouts: &lt;a href=&#34;mailto:akagi201@gmail.com&#34;&gt;akagi201@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Play With Me&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A创: &lt;a href=&#34;http://akmaker.com&#34;&gt;http://akmaker.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Give me your gmail to join my HipChat room.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learning CMake</title>
      <link>http://akagi201.github.io/blog/learning-cmake/</link>
      <pubDate>Sun, 19 Oct 2014 00:35:26 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-cmake/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.mindmup.com/map/b/akagi201/learning%20cmake.mup&#34; data-role=&#34;mindmup-embed&#34; title=&#34;learning cmake&#34; data-width=&#34;90%&#34; data-height=&#34;500&#34; data-style=&#34;border:1px solid black;margin-bottom:5px;&#34;&gt;learning cmake on MindMup&lt;/a&gt;
&lt;script async src=&#34;https://www.mindmup.com/external-embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;为了更好的掌握CLion, 最近把CMake Practice看完, 并练习了一下. 完成之后发现内容很少. 老的autotools也是要掌握的, openwrt上编译很多项目还是要用到他.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Github Repo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Akagi201/learning-cmake&#34;&gt;https://github.com/Akagi201/learning-cmake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learning FFmpeg</title>
      <link>http://akagi201.github.io/blog/learning-ffmpeg/</link>
      <pubDate>Fri, 10 Oct 2014 10:31:26 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-ffmpeg/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.mindmup.com/map/b/akagi201/learning%20ffmpeg.mup&#34; data-role=&#34;mindmup-embed&#34; title=&#34;learning ffmpeg&#34; data-width=&#34;90%&#34; data-height=&#34;500&#34; data-style=&#34;border:1px solid black;margin-bottom:5px;&#34;&gt;learning ffmpeg on MindMup&lt;/a&gt;
&lt;script async src=&#34;https://www.mindmup.com/external-embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;我自己购买了mindmup gold的账号, 有钱淫欢迎投资我啊!!&lt;/p&gt;

&lt;p&gt;发现个ffmpeg领域的大牛, 他已经在读博士了, 天朝这样做学术的人还是值得赞赏的, ffmpeg中文资料必看: &lt;a href=&#34;http://blog.csdn.net/leixiaohua1020&#34;&gt;http://blog.csdn.net/leixiaohua1020&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Makefile</title>
      <link>http://akagi201.github.io/blog/learning-makefile/</link>
      <pubDate>Thu, 05 Jun 2014 01:08:08 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-makefile/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://akagi201.qiniudn.com/learning-makefile.png&#34; alt=&#34;learning-makefile&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;系统的学习了一下Makefile, 隐含规则部分没有详细看, 实际使用过程中也不会依靠这个东西的.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;跟我一起学Makefile&lt;/li&gt;
&lt;li&gt;GNU Makefile Reference: &lt;a href=&#34;http://www.gnu.org/software/make/manual/make.html&#34;&gt;http://www.gnu.org/software/make/manual/make.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;另一个淘宝前辈的总结(简单向, 我的更偏向深入一些): &lt;a href=&#34;http://kenwublog.com/arrange-makefile-knowledges&#34;&gt;http://kenwublog.com/arrange-makefile-knowledges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;调试makefile: &lt;a href=&#34;http://coolshell.cn/articles/3790.html&#34;&gt;http://coolshell.cn/articles/3790.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;偶遇的好东西&lt;/h2&gt;

&lt;p&gt;自主学习的一个好处就是, 在研究的过程中会发现很多好玩的东西.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All Cheat Sheets in one page: &lt;a href=&#34;http://www.cheat-sheets.org/&#34;&gt;http://www.cheat-sheets.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个更加牛逼的东西, 在任何软件界面下按住command键不放即可显示快捷键 &lt;a href=&#34;http://www.mediaatelier.com/CheatSheet/&#34;&gt;http://www.mediaatelier.com/CheatSheet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PopClip, 一个效率工具吧.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Mindmap&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;由于记录的notes太多了, 不能使用免费的存储服务, open放到google drive了 &lt;a href=&#34;https://drive.google.com/file/d/0BzJcP7mynkO5UWhnVjlmd2tWM1E/edit?usp=sharing&#34;&gt;https://drive.google.com/file/d/0BzJcP7mynkO5UWhnVjlmd2tWM1E/edit?usp=sharing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Root Nook Simple Touch</title>
      <link>http://akagi201.github.io/blog/root-nook-simple-touch/</link>
      <pubDate>Sat, 31 May 2014 23:14:24 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/root-nook-simple-touch/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://akagi201.qiniudn.com/nookmanager-success.jpg&#34; alt=&#34;nookmanager-success&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;今天断网了大半天, 然后玩了一会Calibre, 翻出了我的Nook3, 刚好利用这个假期打算把他root掉.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;使用NookManager进行root&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;固件升级到官方1.2.1(我的原来是1.1.5的, 如果不升级那么root时会ModManager会安装失败)&lt;/li&gt;
&lt;li&gt;下载NookManager.img.&lt;/li&gt;
&lt;li&gt;使用dd命令将NookManager.img写入一个空的sd卡中.(我用Mac OS X系统, linux下类似, win下用相应工具)&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;akagi201@akrmbp ~ $ ls /dev/disk*
/dev/disk0   /dev/disk0s1 /dev/disk0s2 /dev/disk0s3 /dev/disk1   /dev/disk1s1
akagi201@akrmbp ~ $ sudo diskutil umount force /dev/disk1s1
Volume (null) on disk1s1 force-unmounted
akagi201@akrmbp ~ $ sudo dd if=/Users/akagi201/Downloads/NookManager.img of=/dev/disk1 bs=1m
64+0 records in
64+0 records out
67108864 bytes transferred in 49.549986 secs (1354367 bytes/sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;关掉Nook的电源, 插入sd卡, 然后开机, 会显示15秒的NookManager的信息.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://akagi201.qiniudn.com/nookmanager-start.jpg&#34; alt=&#34;nookmanager-start&#34; /&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;选择&amp;rdquo;No, continue without wireless&amp;rdquo;, 选yes需要刷机之前设备有连过你附近的ap, 才能验证通过.(这个其实可以改进啦)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://akagi201.qiniudn.com/nookmanager-wifi.jpg&#34; alt=&#34;nookmanager-wifi&#34; /&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用NookManager做一次备份! Rescue -&amp;gt; Backup -&amp;gt; Format remaining space on SD card -&amp;gt; Create backup. (需要花费15~45分钟, 最终备份文件大小是几百M)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://akagi201.qiniudn.com/nookmanager-backup.jpg&#34; alt=&#34;nookmanager-backup&#34; /&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用USB线连接电脑和nook, 拷贝NookBackup分区下的backup.full.gz和backup.full.md5到电脑, 最好上传到网盘备份好.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Root! 备份之后, Back -&amp;gt; Back -&amp;gt; Main Menu -&amp;gt; Root -&amp;gt; Root my device (然后看到全是成功, 如果不成功说明你用其他方法root过或者没有升级到官方的1.2.1)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://akagi201.qiniudn.com/nookmanager-root.jpg&#34; alt=&#34;nookmanager-root&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://akagi201.qiniudn.com/nookmanager-success.jpg&#34; alt=&#34;nookmanager-success&#34; /&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Back -&amp;gt; Exit -&amp;gt; 拔出SD卡 -&amp;gt; 设备自动重启 -&amp;gt; 选择Relaunch. 搞定.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Refs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://forum.xda-developers.com/showthread.php?t=2040351&#34;&gt;http://forum.xda-developers.com/showthread.php?t=2040351&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nookdevs.com/Nook_Simple_Touch/Rooting&#34;&gt;http://nookdevs.com/Nook_Simple_Touch/Rooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Wireless Penetration</title>
      <link>http://akagi201.github.io/blog/wireless-penetration/</link>
      <pubDate>Wed, 28 May 2014 15:28:26 CST</pubDate>
      
      <guid>http://akagi201.github.io/blog/wireless-penetration/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://akagi201.qiniudn.com/wireless-penetration.png&#34; alt=&#34;wireless-penetration&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;之前&lt;a href=&#34;http://www.zhihu.com/people/Akagi201&#34;&gt;知乎&lt;/a&gt;上有人私信我, 问我无线安全都需要了解哪些东西, 如何去学, 当时没有给他一个好的答案, 最近在研究无线安全攻防方面的东西, 刚好看到一个不错的东西整理一下框架, 然后, 慢慢补充细节.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mindmup.com/map/a142782190c86701310d3e06c80965547f&#34; data-role=&#34;mindmup-embed&#34; title=&#34;Wireless Penetration&#34; data-width=&#34;90%&#34; data-height=&#34;500&#34; data-style=&#34;border:1px solid black;margin-bottom:5px;&#34;&gt;Wireless Penetration on MindMup&lt;/a&gt;
&lt;script async src=&#34;https://www.mindmup.com/external-embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Refs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wirelessdefence.org&#34;&gt;http://www.wirelessdefence.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>