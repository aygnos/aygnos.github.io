<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Akagi201</title>
    <link>http://akagi201.github.io/blog/</link>
    <description>Recent content in Blogs on Akagi201</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Mar 2015 11:32:26 +0800</lastBuildDate>
    <atom:link href="http://akagi201.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>break GxFxW</title>
      <link>http://akagi201.github.io/blog/break-firewall/</link>
      <pubDate>Thu, 19 Mar 2015 11:32:26 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/break-firewall/</guid>
      <description>

&lt;h2 id=&#34;gxfxw工作方式:1a79e2e6f86f6cb637f43dff18cb85a4&#34;&gt;GxFxW工作方式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;GxFxW本身是一个人人都知道他的存在, 却从来不会被官方承认的机构.&lt;/li&gt;
&lt;li&gt;GxFxW封锁重点: 新闻, 社交, 政治, 色情, 文件共享类网站.&lt;/li&gt;
&lt;li&gt;DNS劫持和污染: DNS缓存投毒, 虚假IP劫持, 空包劫持, 轻松的扩展污染.&lt;/li&gt;
&lt;li&gt;敏感词过滤.&lt;/li&gt;
&lt;li&gt;IP阻断.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;网络工具:1a79e2e6f86f6cb637f43dff18cb85a4&#34;&gt;网络工具&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ping, tcping(可测tcp端口) 测试网络是否连通&lt;/li&gt;
&lt;li&gt;traceroute 显示路由跳跃情况&lt;/li&gt;
&lt;li&gt;route (netstat -nr) 打印和修改本地路由表&lt;/li&gt;
&lt;li&gt;dig/nslookup 解析域名&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;openwrt组件:1a79e2e6f86f6cb637f43dff18cb85a4&#34;&gt;OpenWrt组件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ipset&lt;/li&gt;
&lt;li&gt;iptables-mod-ipopt, kmod-ipt-ipopt&lt;/li&gt;
&lt;li&gt;ip&lt;/li&gt;
&lt;li&gt;iptables-mod-filter, kmod-ipt-filter&lt;/li&gt;
&lt;li&gt;iptables-mod-u32, kmod-ipt-u32&lt;/li&gt;
&lt;li&gt;ppp-mod-pptp&lt;/li&gt;
&lt;li&gt;openvpn-ssl&lt;/li&gt;
&lt;li&gt;dnsmasq-full&lt;/li&gt;
&lt;li&gt;bind-dig, bind-libs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;refs:1a79e2e6f86f6cb637f43dff18cb85a4&#34;&gt;Refs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;freerouter_v2 &lt;a href=&#34;http://www.lifetyper.com/&#34;&gt;http://www.lifetyper.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.chinagfw.org/&#34;&gt;http://www.chinagfw.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.greatfire.org/&#34;&gt;https://zh.greatfire.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>移植linux内核的list.h到用户态</title>
      <link>http://akagi201.github.io/blog/port-list_h-in-kernel-to-userspace/</link>
      <pubDate>Wed, 18 Mar 2015 08:32:26 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/port-list_h-in-kernel-to-userspace/</guid>
      <description>

&lt;p&gt;以前工作的时候在项目里使用过的, 随着离职, 代码已经无法找到了. :(&lt;/p&gt;

&lt;p&gt;没关系这次放到github上面就不会丢失了.&lt;/p&gt;

&lt;h2 id=&#34;features:0b28ac4f2a3963b5632e45371a251515&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Type Oblivious&lt;/li&gt;
&lt;li&gt;Portable&lt;/li&gt;
&lt;li&gt;Easy to Use&lt;/li&gt;
&lt;li&gt;Readable&lt;/li&gt;
&lt;li&gt;Saves Time&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;usages:0b28ac4f2a3963b5632e45371a251515&#34;&gt;Usages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;List is inside the data item you want to link together.&lt;/li&gt;
&lt;li&gt;You can put &lt;code&gt;struct list_head&lt;/code&gt; anywhere in your structure.&lt;/li&gt;
&lt;li&gt;You can name &lt;code&gt;struct list_head&lt;/code&gt; variable anything you wish.&lt;/li&gt;
&lt;li&gt;You can have multiple lists!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;repo:0b28ac4f2a3963b5632e45371a251515&#34;&gt;Repo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Akagi201/list&#34;&gt;https://github.com/Akagi201/list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;refs:0b28ac4f2a3963b5632e45371a251515&#34;&gt;Refs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://isis.poly.edu/kulesh/stuff/src/klist/&#34;&gt;http://isis.poly.edu/kulesh/stuff/src/klist/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A File-oriented C/C&#43;&#43; Dependency Manager Biicode</title>
      <link>http://akagi201.github.io/blog/a-file-oriented-c-cpp-dependency-manager-biicode/</link>
      <pubDate>Mon, 16 Mar 2015 04:45:08 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/a-file-oriented-c-cpp-dependency-manager-biicode/</guid>
      <description>

&lt;p&gt;Biicode is a file-oriented Dependencies Manager for C and C++ developers.&lt;/p&gt;

&lt;h2 id=&#34;features:2055adacb55920d35b64e7e2263bb34a&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在C++中实现Go语言的modularity, 类似低是通过写合适的&lt;code&gt;#include&lt;/code&gt;语句实现.&lt;/li&gt;
&lt;li&gt;文件级别的依赖管理, 重用已有项目的任何独立文件.&lt;/li&gt;
&lt;li&gt;使用一条命令分享和发布到biicode&lt;/li&gt;
&lt;li&gt;不用打包, 直接使用源码进行模块管理.&lt;/li&gt;
&lt;li&gt;基于CMake编译&lt;/li&gt;
&lt;li&gt;支持依赖包的版本控制.&lt;/li&gt;
&lt;li&gt;biicode保存meta-data在文本文件中.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;docs:2055adacb55920d35b64e7e2263bb34a&#34;&gt;docs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.biicode.com/c++.html&#34;&gt;http://docs.biicode.com/c++.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基础命令:2055adacb55920d35b64e7e2263bb34a&#34;&gt;基础命令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;版本: &lt;code&gt;bii version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查并安装编译工具: &lt;code&gt;bii setup:cpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;搜索依赖: &lt;code&gt;bii find&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译: &lt;code&gt;bii cpp:build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建项目: &lt;code&gt;bii init myproject&lt;/code&gt;, 生成&lt;code&gt;bii&lt;/code&gt;目录&lt;/li&gt;
&lt;li&gt;创建hello world项目: &lt;code&gt;bii new myuser/myblock --hello=cpp&lt;/code&gt;, 生成&lt;code&gt;blocks&lt;/code&gt;目录.&lt;/li&gt;
&lt;li&gt;发布到biicode: &lt;code&gt;bii publish&lt;/code&gt; 默认发布到&lt;code&gt;DEV&lt;/code&gt;, 每次默认覆盖上次的&lt;code&gt;DEV&lt;/code&gt;代码.&lt;/li&gt;
&lt;li&gt;Release life-cycle tags: DEV, ALPHA, BETA, STABLE. &lt;code&gt;bii publish --tag=STABLE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;清理编译生成的结果: &lt;code&gt;bii clean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载一个block到本地项目block中: &lt;code&gt;bii open owner/block_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;吐槽:2055adacb55920d35b64e7e2263bb34a&#34;&gt;吐槽&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;支持nodejs是什么鬼啊! 就算技术上能实现, 可不可以完善好C/C++再搞其他的.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>简单的内核态时间片轮转程序</title>
      <link>http://akagi201.github.io/blog/simple-time-round-in-kernel/</link>
      <pubDate>Sun, 15 Mar 2015 10:45:08 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/simple-time-round-in-kernel/</guid>
      <description>

&lt;h2 id=&#34;实验环境:093d9357b654dcd6bf1cbeea6cc01358&#34;&gt;实验环境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;硬件: qemu(i386)(TODO: 由于我的gentoo没有装图形界面, 暂时在实验楼上做的)&lt;/li&gt;
&lt;li&gt;OS: linux-3.94 + &lt;a href=&#34;https://raw.github.com/mengning/mykernel/master/mykernel_for_linux3.9.4sc.patch&#34;&gt;patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;程序: &lt;a href=&#34;https://github.com/mengning/mykernel/tree/master/mykernel-1.1&#34;&gt;https://github.com/mengning/mykernel/tree/master/mykernel-1.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;repo: &lt;a href=&#34;https://github.com/Akagi201/learning-kernel/tree/master/kernel-inside/week2/mykernel&#34;&gt;https://github.com/Akagi201/learning-kernel/tree/master/kernel-inside/week2/mykernel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lab:093d9357b654dcd6bf1cbeea6cc01358&#34;&gt;lab&lt;/h2&gt;

&lt;h3 id=&#34;test1-环境测试:093d9357b654dcd6bf1cbeea6cc01358&#34;&gt;test1 环境测试&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;测试下环境, 仅仅是模拟了时钟中断, 一直都是一个进程在运行.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd LinuxKernel/linux-3.9.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qemu -kernel arch/x86/boot/bzImage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://akagi201.qiniudn.com/mykernel-start.png&#34; alt=&#34;mykernel-start&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;test2-运行时间片轮转程序:093d9357b654dcd6bf1cbeea6cc01358&#34;&gt;test2 运行时间片轮转程序&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;更新&lt;code&gt;mykernel&lt;/code&gt;下的&lt;code&gt;myinterrupt.c&lt;/code&gt;, &lt;code&gt;mymain.c&lt;/code&gt;, &lt;code&gt;mypcb.h&lt;/code&gt; 为: &lt;a href=&#34;https://github.com/Akagi201/learning-kernel/tree/master/kernel-inside/week2/mykernel/1.0&#34;&gt;https://github.com/Akagi201/learning-kernel/tree/master/kernel-inside/week2/mykernel/1.0&lt;/a&gt; (复制不方便的话, 实验楼提供的ssh的方式连接系统)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make allnoconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qemu -kernel arch/x86/boot/bzImage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;分析:093d9357b654dcd6bf1cbeea6cc01358&#34;&gt;分析&lt;/h2&gt;

&lt;h3 id=&#34;进程的启动:093d9357b654dcd6bf1cbeea6cc01358&#34;&gt;进程的启动&lt;/h3&gt;

&lt;p&gt;进程从&lt;code&gt;void __init my_start_kernel(void)&lt;/code&gt;开始启动&lt;/p&gt;

&lt;p&gt;嵌入式汇编代码, 初始化第0号进程&lt;/p&gt;

&lt;h3 id=&#34;进程的切换:093d9357b654dcd6bf1cbeea6cc01358&#34;&gt;进程的切换&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;schedule()&lt;/code&gt;函数&lt;/p&gt;

&lt;p&gt;未完待续.&lt;/p&gt;

&lt;h2 id=&#34;备注:093d9357b654dcd6bf1cbeea6cc01358&#34;&gt;备注&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;本文为刘博原创作品转载请注明出处.&lt;/li&gt;
&lt;li&gt;《Linux内核分析》MOOC课程 &lt;a href=&#34;http://mooc.study.163.com/course/USTC-1000029000&#34;&gt;http://mooc.study.163.com/course/USTC-1000029000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Simple RTMP Server分析</title>
      <link>http://akagi201.github.io/blog/simple-rtmp-server-analysis/</link>
      <pubDate>Fri, 13 Mar 2015 08:24:08 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/simple-rtmp-server-analysis/</guid>
      <description>

&lt;h2 id=&#34;源码目录分析:864ce55adec621a5238bcdc00b65e669&#34;&gt;源码目录分析&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;整体目录&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;.
├── 3rdparty/ # 第三方库源码跟补丁
├── Makefile  # 通过configure生成的Makefile
├── auto/     # configure读取执行特定功能的脚本
├── conf/     # srs启动的配置文件*.conf
├── configure # 编译脚本用于根据用户参数生成Makefile跟.h文件
├── doc/      # 协议RFC
├── etc/      # linux启动脚本
├── ide/      # IDE工程文件
├── modules/  # 目前为空
├── objs/     # 编译结果
├── research/ # 预研项目
├── scripts/  # 辅助脚本
└── src/      # 源码
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;源码目录&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;.
├── app
│   ├── srs_app_bandwidth.cpp
│   ├── srs_app_bandwidth.hpp
│   ├── srs_app_config.cpp
│   ├── srs_app_config.hpp
│   ├── srs_app_conn.cpp
│   ├── srs_app_conn.hpp
│   ├── srs_app_dvr.cpp
│   ├── srs_app_dvr.hpp
│   ├── srs_app_edge.cpp
│   ├── srs_app_edge.hpp
│   ├── srs_app_empty.cpp
│   ├── srs_app_empty.hpp
│   ├── srs_app_encoder.cpp
│   ├── srs_app_encoder.hpp
│   ├── srs_app_ffmpeg.cpp
│   ├── srs_app_ffmpeg.hpp
│   ├── srs_app_forward.cpp
│   ├── srs_app_forward.hpp
│   ├── srs_app_hds.cpp
│   ├── srs_app_hds.hpp
│   ├── srs_app_heartbeat.cpp
│   ├── srs_app_heartbeat.hpp
│   ├── srs_app_hls.cpp
│   ├── srs_app_hls.hpp
│   ├── srs_app_http.cpp
│   ├── srs_app_http.hpp
│   ├── srs_app_http_api.cpp
│   ├── srs_app_http_api.hpp
│   ├── srs_app_http_client.cpp
│   ├── srs_app_http_client.hpp
│   ├── srs_app_http_conn.cpp
│   ├── srs_app_http_conn.hpp
│   ├── srs_app_http_hooks.cpp
│   ├── srs_app_http_hooks.hpp
│   ├── srs_app_ingest.cpp
│   ├── srs_app_ingest.hpp
│   ├── srs_app_json.cpp
│   ├── srs_app_json.hpp
│   ├── srs_app_kbps.cpp
│   ├── srs_app_kbps.hpp
│   ├── srs_app_listener.cpp
│   ├── srs_app_listener.hpp
│   ├── srs_app_log.cpp
│   ├── srs_app_log.hpp
│   ├── srs_app_mpegts_udp.cpp
│   ├── srs_app_mpegts_udp.hpp
│   ├── srs_app_pithy_print.cpp
│   ├── srs_app_pithy_print.hpp
│   ├── srs_app_recv_thread.cpp
│   ├── srs_app_recv_thread.hpp
│   ├── srs_app_refer.cpp
│   ├── srs_app_refer.hpp
│   ├── srs_app_reload.cpp
│   ├── srs_app_reload.hpp
│   ├── srs_app_rtmp_conn.cpp
│   ├── srs_app_rtmp_conn.hpp
│   ├── srs_app_rtsp.cpp
│   ├── srs_app_rtsp.hpp
│   ├── srs_app_security.cpp
│   ├── srs_app_security.hpp
│   ├── srs_app_server.cpp
│   ├── srs_app_server.hpp
│   ├── srs_app_source.cpp
│   ├── srs_app_source.hpp
│   ├── srs_app_st.cpp
│   ├── srs_app_st.hpp
│   ├── srs_app_st_socket.cpp
│   ├── srs_app_st_socket.hpp
│   ├── srs_app_statistic.cpp
│   ├── srs_app_statistic.hpp
│   ├── srs_app_thread.cpp
│   ├── srs_app_thread.hpp
│   ├── srs_app_utility.cpp
│   └── srs_app_utility.hpp
├── core
│   ├── srs_core.cpp
│   ├── srs_core.hpp
│   ├── srs_core_autofree.cpp
│   ├── srs_core_autofree.hpp
│   ├── srs_core_performance.cpp
│   └── srs_core_performance.hpp
├── kernel
│   ├── srs_kernel_aac.cpp
│   ├── srs_kernel_aac.hpp
│   ├── srs_kernel_buffer.cpp
│   ├── srs_kernel_buffer.hpp
│   ├── srs_kernel_codec.cpp
│   ├── srs_kernel_codec.hpp
│   ├── srs_kernel_consts.cpp
│   ├── srs_kernel_consts.hpp
│   ├── srs_kernel_error.cpp
│   ├── srs_kernel_error.hpp
│   ├── srs_kernel_file.cpp
│   ├── srs_kernel_file.hpp
│   ├── srs_kernel_flv.cpp
│   ├── srs_kernel_flv.hpp
│   ├── srs_kernel_log.cpp
│   ├── srs_kernel_log.hpp
│   ├── srs_kernel_mp3.cpp
│   ├── srs_kernel_mp3.hpp
│   ├── srs_kernel_stream.cpp
│   ├── srs_kernel_stream.hpp
│   ├── srs_kernel_ts.cpp
│   ├── srs_kernel_ts.hpp
│   ├── srs_kernel_utility.cpp
│   └── srs_kernel_utility.hpp
├── libs
│   ├── srs_lib_bandwidth.cpp
│   ├── srs_lib_bandwidth.hpp
│   ├── srs_lib_simple_socket.cpp
│   ├── srs_lib_simple_socket.hpp
│   ├── srs_librtmp.cpp
│   └── srs_librtmp.hpp
├── main
│   └── srs_main_server.cpp
├── protocol
│   ├── srs_raw_avc.cpp
│   ├── srs_raw_avc.hpp
│   ├── srs_rtmp_amf0.cpp
│   ├── srs_rtmp_amf0.hpp
│   ├── srs_rtmp_buffer.cpp
│   ├── srs_rtmp_buffer.hpp
│   ├── srs_rtmp_handshake.cpp
│   ├── srs_rtmp_handshake.hpp
│   ├── srs_rtmp_io.cpp
│   ├── srs_rtmp_io.hpp
│   ├── srs_rtmp_msg_array.cpp
│   ├── srs_rtmp_msg_array.hpp
│   ├── srs_rtmp_sdk.cpp
│   ├── srs_rtmp_sdk.hpp
│   ├── srs_rtmp_stack.cpp
│   ├── srs_rtmp_stack.hpp
│   ├── srs_rtmp_utility.cpp
│   ├── srs_rtmp_utility.hpp
│   ├── srs_rtsp_stack.cpp
│   └── srs_rtsp_stack.hpp
└── utest
    ├── srs_utest.cpp
    ├── srs_utest.hpp
    ├── srs_utest_amf0.cpp
    ├── srs_utest_amf0.hpp
    ├── srs_utest_config.cpp
    ├── srs_utest_config.hpp
    ├── srs_utest_core.cpp
    ├── srs_utest_core.hpp
    ├── srs_utest_kernel.cpp
    ├── srs_utest_kernel.hpp
    ├── srs_utest_protocol.cpp
    ├── srs_utest_protocol.hpp
    ├── srs_utest_reload.cpp
    └── srs_utest_reload.hpp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;编译脚本分析:864ce55adec621a5238bcdc00b65e669&#34;&gt;编译脚本分析&lt;/h2&gt;

&lt;h3 id=&#34;trunk-configure:864ce55adec621a5238bcdc00b65e669&#34;&gt;&lt;code&gt;/trunk/configure&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;configure&lt;/code&gt;是个&lt;code&gt;Bash&lt;/code&gt;脚本, 根据配置来生成&lt;code&gt;Makefile&lt;/code&gt;跟&lt;code&gt;.h&lt;/code&gt;文件.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果存在&lt;code&gt;Makefile&lt;/code&gt;文件, 则执行&lt;code&gt;make clean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建&lt;code&gt;objs&lt;/code&gt;目录&lt;/li&gt;
&lt;li&gt;导入并执行&lt;code&gt;auto/options.sh&lt;/code&gt;用于解析用户的编译参数, 对相应的SRS_XXX的变量进行赋值.&lt;/li&gt;
&lt;li&gt;导入&lt;code&gt;auto/generate-srs-librtmp-project.sh&lt;/code&gt;用于生成srs-librtmp项目, 创建项目目录, 拷贝一些文件到对应目录. &lt;code&gt;research/librtmp/*.c research/librtmp/Makefile auto/generate_header.sh auto/generate-srs-librtmp-single.sh src/core/* src/kernel/* src/protocol/* src/libs/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导入并执行&lt;code&gt;auto/depends.sh&lt;/code&gt;, 检查缺少的依赖工具并安装&lt;/li&gt;
&lt;li&gt;导入并执行&lt;code&gt;auto/auto_headers.sh&lt;/code&gt;, 生成&lt;code&gt;srs_auto_headers.hpp&lt;/code&gt;, 声明配置的宏.&lt;/li&gt;
&lt;li&gt;srs modules相关&lt;/li&gt;
&lt;li&gt;编译工具跟编译参数赋值.&lt;/li&gt;
&lt;li&gt;指定第三方库路径&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;auto/modules.sh&lt;/code&gt;将不同模块写入Makefile中.&lt;/li&gt;
&lt;li&gt;生成srs app的编译目标的相关的Makefile代码. &lt;code&gt;auto/apps.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;生成utest的编译目标的相关的Makefile代码. &lt;code&gt;auto/utest.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;颜色化输出&lt;code&gt;auto/summary.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;生成&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;导出-srs-librtmp-项目源码与编译:864ce55adec621a5238bcdc00b65e669&#34;&gt;导出&lt;code&gt;srs-librtmp&lt;/code&gt;项目源码与编译&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./configure --export-librtmp-project=srs-librtmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd srs-librtmp &amp;amp;&amp;amp; make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;成果物: &lt;code&gt;objs/include/srs_librtmp.h&lt;/code&gt; &lt;code&gt;objs/lib/srs_librtmp.a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;examples: &lt;code&gt;research/librtmp&lt;/code&gt; &lt;a href=&#34;https://github.com/winlinvip/simple-rtmp-server/wiki/v2_CN_SrsLibrtmp#srs-librtmp-examples&#34;&gt;https://github.com/winlinvip/simple-rtmp-server/wiki/v2_CN_SrsLibrtmp#srs-librtmp-examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;源码: &lt;code&gt;src&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>学习State Threads</title>
      <link>http://akagi201.github.io/blog/learning-state-threads/</link>
      <pubDate>Tue, 10 Mar 2015 12:35:08 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-state-threads/</guid>
      <description>

&lt;iframe src=&#34;https://atlas.mindmup.com/akagi201/learning_state_threads/index.html&#34; width=&#34;600&#34; height=&#34;300&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;State Threads(简称ST)是一个C语言轻量级用户层的线程库, 总共4631行C代码. 这个线程库有助于开发者实现一个具有高性能和可扩展性的网络应用程序. 是Apache项目里面的一个子项目.(?Apache以前听说是用的select啊, 可能apache最后没用st, 懒得去考证了)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;akagi201@akrmbp ~/Documents/state-threads (master) $ cloc .
      41 text files.
      38 unique files.
      11 files ignored.

http://cloc.sourceforge.net v 1.62  T=0.22 s (139.8 files/s, 61376.1 lines/s)
---------------------------------------------------------------------------------------
Language                             files          blank        comment           code
---------------------------------------------------------------------------------------
C                                       16           1046           1174           4631
HTML                                     3            236              0           3822
C/C++ Header                             6            270            288            939
make                                     3            106            205            364
Assembly                                 1             31            161            239
Windows Module Definition                1              0              0             51
Bourne Shell                             1             10              9             26
---------------------------------------------------------------------------------------
SUM:                                    31           1699           1837          10072
---------------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docs:38d9278d749fcead82dfaa9cdfb529e2&#34;&gt;Docs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;项目官方只有4页文档. &lt;a href=&#34;http://state-threads.sourceforge.net/docs/index.html&#34;&gt;http://state-threads.sourceforge.net/docs/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;其中introductory已经被好多国人翻译过了.(见下面Refs)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;refs:38d9278d749fcead82dfaa9cdfb529e2&#34;&gt;Refs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://coolshell.cn/articles/12012.html&#34;&gt;http://coolshell.cn/articles/12012.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zfengzhen/Blog/blob/master/article/%E4%B8%BA%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%80%8C%E7%94%9F%E7%9A%84State%20Threads%5B%E5%B8%B8%E8%A7%81%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E6%B5%85%E6%9E%90%5D.md&#34;&gt;https://github.com/zfengzhen/Blog/blob/master/article/%E4%B8%BA%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%80%8C%E7%94%9F%E7%9A%84State%20Threads%5B%E5%B8%B8%E8%A7%81%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E6%B5%85%E6%9E%90%5D.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/win_lin/article/details/8242653&#34;&gt;http://blog.csdn.net/win_lin/article/details/8242653&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wuyu201321060203/wuyu201321060203.github.io/blob/master/_posts/2014-10-15-ST.md&#34;&gt;https://github.com/wuyu201321060203/wuyu201321060203.github.io/blob/master/_posts/2014-10-15-ST.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>一个简单的汇编程序分析</title>
      <link>http://akagi201.github.io/blog/a-simple-assembly-program-analysis/</link>
      <pubDate>Sun, 01 Mar 2015 12:38:08 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/a-simple-assembly-program-analysis/</guid>
      <description>

&lt;p&gt;最近打算跟一下&lt;linux内核分析&gt;这门mooc课程. 刚完成了第一周的内容. mindmup内容开源如下:&lt;/p&gt;

&lt;iframe src=&#34;https://atlas.mindmup.com/akagi201/learning_kernel/index.html&#34; width=&#34;600&#34; height=&#34;800&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;这里使用跟linux内核一样的AT&amp;amp;T汇编语法.&lt;/p&gt;

&lt;h2 id=&#34;at-t-汇编语法注意事项:6263f68368f4d2b872366aacc7002c39&#34;&gt;AT&amp;amp;T 汇编语法注意事项&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;大小写: 指令语句使用小写字母.&lt;/li&gt;
&lt;li&gt;操作符赋值方向: 第一个为源操作数, 第二个为目的操作数, 方向从左到右, 合乎自然(与C库相反)&lt;/li&gt;
&lt;li&gt;前缀: 寄存器需要加前缀&amp;rdquo;%&amp;ldquo;, 立即数需要加前缀&amp;rdquo;$&amp;ldquo;.&lt;/li&gt;
&lt;li&gt;间接寻址语法: 使用 &amp;ldquo;(&amp;rdquo;, &amp;ldquo;)&amp;rdquo;&lt;/li&gt;
&lt;li&gt;后缀: 大部分指令操作码的最后一个字母表示操作数大小, &amp;ldquo;b&amp;rdquo;表示byte, &amp;ldquo;w&amp;rdquo;表示word(2个字节), &amp;ldquo;l&amp;rdquo;表示long(4个字节).&lt;/li&gt;
&lt;li&gt;注释: @用于一行代码后面添加注释内容, #是整行注释.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;简单的c源程序:6263f68368f4d2b872366aacc7002c39&#34;&gt;简单的C源程序&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;/*
 * @file main.c
 * @author Akagi201
 * @date 2015/03/01
 *
 * A simple code to learn how assembly code works.
 * build on linux x64: gcc -S -o main.s main.c -m32
 */

int g(int x) {
  return x + 3;
}

int f(int x) {
  return g(x);
}

int main (void) {
  return f(8) + 1;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;linux-x64平台汇编命令:6263f68368f4d2b872366aacc7002c39&#34;&gt;Linux x64平台汇编命令&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://akagi201.qiniudn.com/assembly.png&#34; alt=&#34;asm&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我的编译环境是: 物理机是rmbp, 运行的virtualbox, guest OS是gentoo x64.&lt;/li&gt;
&lt;li&gt;汇编命令: &lt;code&gt;gcc –S –o main.s main.c -m32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将得到的main.s文件中以.开头的行删掉(用于辅助链接的).&lt;/li&gt;
&lt;li&gt;生成的汇编代码中增加了部分注释说明了程序执行的过程.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;g:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax # eax = 8
	addl	$3, %eax # eax = 8 + 3 = 11
	popl	%ebp
	ret

f:
	pushl	%ebp
	movl	%esp, %ebp # 每个函数前两句都是这个, 用于保存上一个堆栈的栈顶, 跟清空出一个新的堆栈
	subl	$4, %esp
	movl	8(%ebp), %eax # eax = 8
	movl	%eax, (%esp) # 把8放到栈顶
	call	g # 跳到g标号
	leave
	ret

main:
	pushl	%ebp # 将当前ebp的值压栈, 同时esp的值被修改(即减4)
	movl	%esp, %ebp # 将ebp指向esp
	subl	$4, %esp # 将esp向下移动一个位置
	movl	$8, (%esp) # 将立即数8赋值给esp指向的位置(即当前的栈顶)
	call	f # 等价于两条语句 pushl eip; movl f eip =&amp;gt; 当前eip实际指向addl $1, %eax这条指令, 跳转到f标号处执行
	addl	$1, %eax # eax = 11 + 1 = 12
	leave
	ret # 最终ebp, esp回到main函数最初的栈的位置.

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;备注:6263f68368f4d2b872366aacc7002c39&#34;&gt;备注&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;本文为刘博原创作品转载请注明出处.&lt;/li&gt;
&lt;li&gt;《Linux内核分析》MOOC课程&lt;a href=&#34;http://mooc.study.163.com/course/USTC-1000029000&#34;&gt;http://mooc.study.163.com/course/USTC-1000029000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>教不懂电脑的父母上网</title>
      <link>http://akagi201.github.io/blog/parents-network/</link>
      <pubDate>Thu, 19 Feb 2015 13:30:08 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/parents-network/</guid>
      <description>

&lt;p&gt;估计跟我一样80后的人都会涉及这个头大的问题, &amp;ldquo;教父母上网&amp;rdquo;. 下面整理些要点.&lt;/p&gt;

&lt;h2 id=&#34;父母知识背景:dcbf7deb443f2c3061d933a6626bb95a&#34;&gt;父母知识背景&lt;/h2&gt;

&lt;p&gt;父母虽然年轻时候也算接受过一些中等教育, 不过工作不是从事脑力方面, 学习能力几乎为零. 电脑跟智能手机方面知识几乎为零. 不手把手教, 一点不肯学, 不学习借口一堆.&lt;/p&gt;

&lt;h2 id=&#34;想要教的东西:dcbf7deb443f2c3061d933a6626bb95a&#34;&gt;想要教的东西&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;基本的硬件组成跟连接&lt;/li&gt;
&lt;li&gt;拼音打字, 基本快捷键&lt;/li&gt;
&lt;li&gt;帮助注册邮箱跟必备的账号&lt;/li&gt;
&lt;li&gt;QQ, 包含语音跟视频&lt;/li&gt;
&lt;li&gt;淘宝等网上购物&lt;/li&gt;
&lt;li&gt;推荐一些应该上的网站&lt;/li&gt;
&lt;li&gt;打免费电话&lt;/li&gt;
&lt;li&gt;手机上好用的app&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;email-qq:dcbf7deb443f2c3061d933a6626bb95a&#34;&gt;email, qq&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;要求不需要翻墙, 中文界面&lt;/li&gt;
&lt;li&gt;选择qq邮箱(需要手机号才行)&lt;/li&gt;
&lt;li&gt;备用邮箱用我的, 密码, 密保跟账号我都保留记录好.&lt;/li&gt;
&lt;li&gt;加我的账号为好友&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;电脑上软件:dcbf7deb443f2c3061d933a6626bb95a&#34;&gt;电脑上软件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;装了腾讯系列的浏览器, 电脑管家等, 先观察看看, 不行就换360吧.&lt;/li&gt;
&lt;li&gt;qq, 千牛, 迅雷, 360wifi, winrar, 酷盘, 百度云, 搜狗输入法, 爱奇艺PPS(看综艺节目)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;电脑硬件配件:dcbf7deb443f2c3061d933a6626bb95a&#34;&gt;电脑硬件配件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;耳机插孔的双音响(不需要配件, 连接不无线的简单)&lt;/li&gt;
&lt;li&gt;耳麦, 摄像头(用于远程视频通话)&lt;/li&gt;
&lt;li&gt;360随身wifi(家里这边移动宽带限制, 路由器上拨号失败, 只能电脑上拨号, 用于分享网络给手机)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;引导使用的网站:dcbf7deb443f2c3061d933a6626bb95a&#34;&gt;引导使用的网站&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;我的博客, 我公司的网站, 淘宝, 支付宝, 知乎, 优酷, 爱奇艺PPS, 百度地图, 携程, V2EX, 百度云.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;手机app:dcbf7deb443f2c3061d933a6626bb95a&#34;&gt;手机app&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;红米+酷派大神+小米充电宝 两台&lt;/li&gt;
&lt;li&gt;微信, 微博, qq, 支付宝, 淘宝, 千牛, 百度地图, qq邮箱, 爱奇艺, 优酷, 携程, 虾米音乐, 易信, 叮叮, 滴滴打车, 手机营业厅&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The Missing C Package Manager Clib</title>
      <link>http://akagi201.github.io/blog/the-missing-c-package-manager-clib/</link>
      <pubDate>Thu, 12 Feb 2015 07:44:08 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/the-missing-c-package-manager-clib/</guid>
      <description>

&lt;p&gt;web与移动开发领域每种语言都有自己的包管理器. &lt;code&gt;nodejs&lt;/code&gt;的&lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;golang&lt;/code&gt;的&lt;code&gt;go get&lt;/code&gt;, &lt;code&gt;lua&lt;/code&gt;的&lt;code&gt;luarocks&lt;/code&gt;, ios&amp;amp;macosx平台的&lt;code&gt;cocoapods&lt;/code&gt;, &lt;code&gt;Python&lt;/code&gt;的&lt;code&gt;Pip&lt;/code&gt;&amp;amp;&lt;code&gt;Eggs&lt;/code&gt;, &lt;code&gt;TeX&lt;/code&gt;的&lt;code&gt;CTAN&lt;/code&gt;, &lt;code&gt;Perl&lt;/code&gt;的&lt;code&gt;CPAN&lt;/code&gt;, &lt;code&gt;Java&lt;/code&gt;的&lt;code&gt;Maven&lt;/code&gt;, &lt;code&gt;Haskell&lt;/code&gt;的&lt;code&gt;cabal&lt;/code&gt;, &lt;code&gt;Ruby&lt;/code&gt;的&lt;code&gt;Gems&lt;/code&gt;, &lt;code&gt;.Net&lt;/code&gt;的&lt;code&gt;NuGet&lt;/code&gt;. 如果有兴趣, 可以看下这个播客&lt;a href=&#34;https://ipn.li/kernelpanic/7/&#34;&gt;https://ipn.li/kernelpanic/7/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不过C语言确一直没有一个这样的工具. 导致的问题就是, 当你需要用功C语言实现一个很通用的功能的时候, 你没有一个合适的地方去找, 只能google, stackoverflow, github去搜, 然后你有发现你要的这个功能在一个很大的项目里面的一个小模块, 然后很难独立提取出来, 然后只好重复造轮子.&lt;/p&gt;

&lt;p&gt;还好, nodejs社区的几个人创造了Clib. C语言终于有自己的包管理器啦: Clib. TJ Holowaychuk先用node.js写了Clib, 然后Stephen Mathieson把他port成了C.&lt;/p&gt;

&lt;h2 id=&#34;clib-developer-s-blog:debc6fc2bbaa8343a981b776ce000593&#34;&gt;Clib developer&amp;rsquo;s blog&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/code-adventures/introducing-clib-b32e6e769cb3&#34;&gt;Introducing Clib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ashworth.in/the-advent-of-clib-the-c-package-manager/&#34;&gt;The Advent of Clib: the C Package Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Golang on OpenWrt</title>
      <link>http://akagi201.github.io/blog/golang-on-openwrt/</link>
      <pubDate>Fri, 06 Feb 2015 01:51:08 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/golang-on-openwrt/</guid>
      <description>

&lt;h2 id=&#34;repo:771690f5aca57d887d51a64a24f5174e&#34;&gt;Repo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GeertJohan/openwrt-go&#34;&gt;https://github.com/GeertJohan/openwrt-go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;steps:771690f5aca57d887d51a64a24f5174e&#34;&gt;Steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/GeertJohan/openwrt-go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout add-gccgo-and-libgo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make menuconfig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt; Advanced configuration options
-&amp;gt; Toolchain options
....
-&amp;gt; Select Build/Install gccgo
....
-&amp;gt; C library implementation
-&amp;gt; Use eglibc
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make V=s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;result:771690f5aca57d887d51a64a24f5174e&#34;&gt;result&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;firmware with eglibc: &lt;code&gt;bin/ar71xx-eglibc/openwrt-ar71xx-generic-carambola2-squashfs-sysupgrade.bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add toolchain to PATH: &lt;code&gt;export PATH=/home/akagi201/openwrt-go/staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_eglibc-2.19/bin:$PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add toolchain alias: &lt;code&gt;alias mips_gccgo=&#39;mips-openwrt-linux-gccgo -Wl,-R,/home/akagi201/openwrt-go/staging_dir/toolchain-mips_34kc_gcc-4.8.0_eglibc-2.19/lib/gcc/mips-openwrt-linux-gnu/4.8.3 -L /home/akagi201/openwrt-go/staging_dir/toolchain-mips_34kc_gcc-4.8.0_eglibc-2.19/lib&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;test:771690f5aca57d887d51a64a24f5174e&#34;&gt;test&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;use libgo non-static.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;package main
import &amp;quot;fmt&amp;quot;
func main() {
    fmt.Println(&amp;quot;hello world&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mips_gccgo -Wall -o hello_static_libgo hello.go -static-libgo&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Before stripped&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;akagi201@akgentoo ~/openwrt-go (add-gccgo-and-libgo*) $ file hello_static_libgo
hello_static_libgo: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1, dynamically linked (uses shared libs), for GNU/Linux 2.6.16, not stripped

akagi201@akgentoo ~/openwrt-go (add-gccgo-and-libgo*) $ ll hello_static_libgo
-rwxr-xr-x 1 akagi201 akagi201 2.6M Feb  6 01:47 hello_static_libgo
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;After stripped&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;akagi201@akgentoo ~/openwrt-go (add-gccgo-and-libgo*) $ file hello_static_libgo
hello_static_libgo: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.16, stripped
akagi201@akgentoo ~/openwrt-go (add-gccgo-and-libgo*) $ ll hello_static_libgo
-rwxr-xr-x 1 akagi201 akagi201 1.2M Feb  6 02:02 hello_static_libgo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;refs:771690f5aca57d887d51a64a24f5174e&#34;&gt;Refs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GeertJohan/openwrt-go/issues/2&#34;&gt;https://github.com/GeertJohan/openwrt-go/issues/2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Stream Encoder</title>
      <link>http://akagi201.github.io/blog/stream-encoder/</link>
      <pubDate>Wed, 14 Jan 2015 16:02:08 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/stream-encoder/</guid>
      <description>

&lt;h2 id=&#34;obs:4514a440f10e9be1d43982889f1a0c6b&#34;&gt;OBS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jp9000/obs-studio&#34;&gt;https://github.com/jp9000/obs-studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开发前说明: &lt;a href=&#34;https://obsproject.com/forum/threads/getting-started-with-obs-development.21326/&#34;&gt;https://obsproject.com/forum/threads/getting-started-with-obs-development.21326/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文档: &lt;a href=&#34;http://jp9000.github.io/OBS/&#34;&gt;http://jp9000.github.io/OBS/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OBS core: libobs, OBS UI: obs, core跟ui是独立的.&lt;/li&gt;
&lt;li&gt;OBS core plugins: plugins&lt;/li&gt;
&lt;li&gt;IRC: #obsproject on Freenode, #obs-dev on Quakenet&lt;/li&gt;
&lt;li&gt;settings estimator: &lt;a href=&#34;https://obsproject.com/estimator&#34;&gt;https://obsproject.com/estimator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ble:4514a440f10e9be1d43982889f1a0c6b&#34;&gt;BLE&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wenjiegit/Bull-Live-Encoder&#34;&gt;https://github.com/wenjiegit/Bull-Live-Encoder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learning RTP</title>
      <link>http://akagi201.github.io/blog/learning-rtp/</link>
      <pubDate>Mon, 15 Dec 2014 21:50:26 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-rtp/</guid>
      <description>

&lt;iframe src=&#34;https://atlas.mindmup.com/akagi201/learning_rtp/index.html&#34; height=&#34;100%&#34; width = &#34;100%&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;code&gt;RTP&lt;/code&gt;(Real-time Transport Protocol)是用于Internet上针对多媒体数据流的一种传输协议. &lt;code&gt;RTP&lt;/code&gt;被定义为在一对一或一对多的传输情况下工作, 其目的是提供时间信息和实现流同步. &lt;code&gt;RTP&lt;/code&gt;通常使用&lt;code&gt;UDP&lt;/code&gt;来传送数据, 但&lt;code&gt;RTP&lt;/code&gt;也可以在&lt;code&gt;TCP&lt;/code&gt;或&lt;code&gt;ATM&lt;/code&gt;等其他协议之上工作.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RTP&lt;/code&gt;本身并没有提供按时发送机制或其他服务质量(QoS)保证, 它依赖于底层服务去实现这一过程. &lt;code&gt;RTP&lt;/code&gt;并不保证传送或防止无序传送, 也不确定底层网络的可靠性.&lt;/p&gt;

&lt;h2 id=&#34;book:5ff01fee8fb5e05d09be76e2278c94dc&#34;&gt;book&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/rtp-audio-and/0672322498/&#34;&gt;https://www.safaribooksonline.com/library/view/rtp-audio-and/0672322498/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/RTP-Audio-Video-Internet-paperback/dp/0321833627&#34;&gt;http://www.amazon.com/RTP-Audio-Video-Internet-paperback/dp/0321833627&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learning cURL</title>
      <link>http://akagi201.github.io/blog/learning-curl/</link>
      <pubDate>Tue, 09 Dec 2014 03:55:26 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-curl/</guid>
      <description>

&lt;iframe src=&#34;https://atlas.mindmup.com/akagi201/learning_curl/index.html&#34; height=&#34;100%&#34; width = &#34;100%&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;cURL全称是&amp;rdquo;Client for URLs&amp;rdquo;, 即URL客户端.&lt;/p&gt;

&lt;p&gt;是&lt;a href=&#34;https://github.com/bagder&#34;&gt;Daniel Stenberg&lt;/a&gt;的一个个人项目, 就放在个人的一个二级域名&lt;a href=&#34;http://curl.haxx.se/&#34;&gt;http://curl.haxx.se/&lt;/a&gt;下, 所以有的地方略显粗糙也可以理解了.&lt;/p&gt;

&lt;p&gt;项目历史应该比较久远了, 文档全是用的&lt;code&gt;manpage&lt;/code&gt;写的, 不用到处找了, 直接&lt;code&gt;man&lt;/code&gt;就可以了.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl&lt;/code&gt;的&lt;code&gt;repo&lt;/code&gt;由两部分组成, &lt;code&gt;curl&lt;/code&gt;命令行跟&lt;code&gt;libcurl&lt;/code&gt;, 其中复杂的东西都在&lt;code&gt;libcurl&lt;/code&gt;中了.&lt;/p&gt;

&lt;h2 id=&#34;源码结构:6096a6507df9bf016a80e7cff1b680d5&#34;&gt;源码结构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl&lt;/code&gt;命令行的源码在&lt;code&gt;src/&lt;/code&gt;, 入口在&lt;code&gt;tool_main.c&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libcurl&lt;/code&gt;的源码在&lt;code&gt;lib/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;API example&lt;/code&gt;的源码在&lt;code&gt;docs/examples&lt;/code&gt;下.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learning Google C&#43;&#43; Testing Framework</title>
      <link>http://akagi201.github.io/blog/learning-gtest/</link>
      <pubDate>Thu, 04 Dec 2014 21:35:26 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-gtest/</guid>
      <description>&lt;iframe src=&#34;https://atlas.mindmup.com/akagi201/learning_gtest/index.html&#34; height=&#34;100%&#34; width = &#34;100%&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;最近接触不少有趣的小项目, 让我重拾C语言的乐趣了. 现在移动和web发展非常块, web领域技术的发展, 也推进了底层技术的发展. &lt;code&gt;clib&lt;/code&gt;就让我对&lt;code&gt;js&lt;/code&gt;跟&lt;code&gt;node&lt;/code&gt;这帮人的印象大大改观.&lt;/p&gt;

&lt;p&gt;跟着牛人的脚本慢慢前进是不会错的. 选择了&lt;code&gt;CLion&lt;/code&gt;, 导致选择了&lt;code&gt;CMake&lt;/code&gt;, 又由&lt;code&gt;CMake&lt;/code&gt;跟&lt;code&gt;CLion&lt;/code&gt;选择了&lt;code&gt;GTest&lt;/code&gt;. 学习下来发现都是好东西.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Google C++ Testing Framework&lt;/code&gt;简称&lt;code&gt;GTest&lt;/code&gt;, 跟&lt;code&gt;CMake&lt;/code&gt;集成的非常好, 而且他本身就是用&lt;code&gt;CMake&lt;/code&gt;编译的, 作为一个转向&lt;code&gt;CMake&lt;/code&gt;开发者来说, 这是极赞的.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GTest&lt;/code&gt;文档相应比较少, 对于新手来说可能有点曲线, 我写了几个集成&lt;code&gt;Makefile&lt;/code&gt;跟&lt;code&gt;CMake&lt;/code&gt;的例子, 可以看看: &lt;a href=&#34;https://github.com/Akagi201/learning-gtest&#34;&gt;https://github.com/Akagi201/learning-gtest&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Libuv</title>
      <link>http://akagi201.github.io/blog/learning-libuv/</link>
      <pubDate>Thu, 13 Nov 2014 01:50:26 +0800</pubDate>
      
      <guid>http://akagi201.github.io/blog/learning-libuv/</guid>
      <description>&lt;iframe src=&#34;https://atlas.mindmup.com/akagi201/learning_libuv/index.html&#34; height=&#34;100%&#34; width = &#34;100%&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;想研究libuv很久了, 一直没有用他的机会, 这次项目中有个多进程管理的地方, 正纠结怎么操作麻烦的信号量时, 想起libuv也可以完成这件事, 所以, 赶紧用起来. 不用白不用.&lt;/p&gt;

&lt;p&gt;Lua在嵌入式领域大有可以, 可以编译成一个liblua.a的库静态连接到C程序, 还有很多丰富的工具, 本身语言有非常小巧, 以后还是多用lua写写, 方便移植啊. 多平台各种差异, 搞死人啊.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>